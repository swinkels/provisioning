(work in progress)

This repo contains the files to provision a virtual machine that runs the
Xubuntu desktop environment that I use as the starting point for my development
machines. The virtual machine uses KVM and as such, requires a Linux host.

* Tools & technologies

To create and configure the virtual machine (VM), I rely on the following tools:

- [[https://www.linux-kvm.org/page/Main_Page][KVM]] to create and run VMs on Linux
- [[https://libvirt.org/][libvirt]] to manage the VMs and to provide an API to [[https://www.vagrantup.com/][Vagrant]]
- [[https://www.vagrantup.com/][Vagrant]] to install a VM based on Ubuntu 18.04
- [[https://www.gnu.org/software/make/][GNU Make]] to automate the configuration of the VM after its install
- [[http://www.fabfile.org/][Fabric]] to deploy the Makefile to the VM and run it there

In the context of Vagrant, /provisioning/ is the term to "automatically install
software, alter configurations, and more on the machine as part of the vagrant
up process"[fn:vagrant-provision]]. As such, Vagrant reserves "provisioning" to
the configuration of the OS once Vagrant has created the VM and installed the
base box.

I am not sure if the Vagrent definition of provisioning is the official one, if
there is an official one, but that is the definition I use in this document. So
in my setup, GNU make and Fabric take care of provisioning the VM.

* Initial setup

** Configuration of libvirt storage pool

libvirt stores VM images in a storage pool named "default" and that points to
/var/lib/libvirt/images. That is not ideal for my main host machine as the root
partition is on a smaller SSD and I added a second storage pool named "kvm-pool"
on my second, much larger drive[fn:kvm-pool]. I did this using [[https://virt-manager.org/][virt-manager]], a
GUI application to manage virtual machines through libvirt.

** Configuration of libvirt state directory

When you save a running image or create a snapshot, libvirt stores it in
/var/lib/libvirt/qemu. These saves require quite some disk space and in no time
I was able to fill the root partition of my main host machine. Unfortunately
there is no way to specify another directory for these saves. To work around
that, I recreated the /var/lib/libvirt/qemu directory structure on a partition
with ample space and created a soft-link to that directory:
#+BEGIN_SRC
mkdir -p /media/data/libvirt/qemu/save /media/data/libvirt/qemu/snapshot
chown --recursive libvirt-qemu:kvm /media/data/libvirt/qemu
ln -s /media/data/libvirt/qemu/save /var/lib/libvirt/qemu/save
ln -s /media/data/libvirt/qemu/snapshot /var/lib/libvirt/qemu/snapshot
#+END_SRC
I executed these statements with root permissions so I could access all
directories.

** Installation of Vagrant

I use the vagrant version that comes with Xubuntu 16.04:
#+BEGIN_SRC
apt-get install vagrant
#+END_SRC
At the time of writing this, its version is version 2.2.2.

To be able to use vagrant with KVM and libvirt, I need several vagrant plugins:
#+BEGIN_SRC
vagrant plugin install vagrant-kvm
vagrant plugin install vagrant-libvirt
vagrant plugin install nokogiri
vagrant plugin install vagrant-mutate
#+END_SRC

Vagrant downloads end up in your home directory in ~/.vagrant.d/. To let Vagrant
use a directory on my second drive, I set environment variable VAGRANT_HOME:
#+BEGIN_SRC
export VAGRANT_HOME=/media/data/pieter/.vagrant.d
#+END_SRC
I set that line in ~/.profile so it is always set.

** Setup the Python environment

Fabric is a Python tool to execute shell commands over SSH. I use the Python2
version, which I install in a Python virtual environment. The use of virtualenvs
is beyond the scope of this README, but to setup one and install Fabric, use the
following commands:
#+BEGIN_SRC
mkvirtualenv provisioning
pip install -r requirements.txt
#+END_SRC

** Preparation of the Vagrant box

The [[https://app.vagrantup.com/bento/boxes/ubuntu-18.04][bento/ubuntu-18.04]] box is not available for libvirt, so I downloaded the
onver for VirtualBox:
#+BEGIN_SR
vagrant box add bento/ubuntu-18.04 --provider virtualbox
#+END_SRC
and convert that one to libvirt:
#+BEGIN_SRC
vagrant mutate bento/ubuntu-18.04 libvirt
#+END_SRC

* Creating and provision the VM

** Initial installation

To create the VM and install the base box, use the following command:
#+BEGIN_SRC
vagrant up --provider=libvirt
#+END_SRC
When that command finishes, the VM is up and running and we can connect to
it using the following command:
#+BEGIN_SRC sh
vagrant ssh
#+END_SRC
In its current state, the installed OS is rather bare-bones. To be able to use
it for development a lot more configuration is needed. That configuration is
done using Fabric.

** Provisioning

Fortunately Vagrant can export its SSH config so other tools can use it:
#+BEGIN_SRC sh :results output :exports both
vagrant ssh-config > vagrant-ssh
cat vagrant-ssh
#+END_SRC

#+RESULTS:
: Host default
:   HostName 192.168.121.63
:   User vagrant
:   Port 22
:   UserKnownHostsFile /dev/null
:   StrictHostKeyChecking no
:   PasswordAuthentication no
:   IdentityFile /home/pieter/tmp/provisioning/demo/.vagrant/machines/default/libvirt/private_key
:   IdentitiesOnly yes
:   LogLevel FATAL
:

For example, we can use standard ssh to connect to the VM:
#+BEGIN_SRC
$> ssh -F vagrant-ssh default
#+END_SRC

#+BEGIN_SRC elisp :results silent :exports none
(pyvenv-workon "provisioning")
#+END_SRC

Much of the configuration of the VM is automated via the Makefile that is in the
root of this rep. I use Fabric to copy the Makefile to the VM, and run ~make
bootstrap~ on the VM. First copy the Makefile and supporting file(s):
#+BEGIN_SRC sh :results output :exports both
fab --hosts=default --ssh-config=vagrant-ssh sync
#+END_SRC

#+RESULTS:

Then run the Makefile for target 'bootstrap', which will update the installed
packages and install some (more or less) essential packages:
#+BEGIN_SRC sh :results output :exports both
fab --hosts=default --ssh-config=vagrant-ssh make bootstrap
#+END_SRC
After this target and the update of installed packages, you are advised to
reboot the host:
#+BEGIN_SRC sh :results output :exports both
vagrant reload
#+END_SRC

#+RESULTS:
: ==> default: Halting domain...
: ==> default: Starting domain.
: ==> default: Waiting for domain to get an IP address...
: ==> default: Waiting for SSH to become available...
: ==> default: Creating shared folders metadata...
: ==> default: Rsyncing folder: /home/pieter/tmp/provisioning/demo/ => /vagrant
: ==> default: Machine already provisioned. Run `vagrant provision` or use the `--provision`
: ==> default: flag to force provisioning. Provisioners marked to run always will still run.

The Makefile has several other targets to provision the VM, see section [[*Makefile rules][Makefile
rules]] for an overview.

** Final manual configuration

There are some customizations to my desktop environment that I did not bother to
automate, for example, I
- use the Whisker Menu instead of the Application Menu,
- remove the second panel at the bottom of the Xfce desktop, and
- set a desktop wallpaper.

* Appendix

** Often used Vagrant commands

- vagrant up :: to install or start the VM
- vagrant suspend :: to "suspend" the VM - note that what suspend does, depends
     on the provider
- vagrant reload :: to shutdown a running VM and restart it
- vagrant provision :: to configure the VM

In the remainder of this section I will illustrate the use of these commands.

First up is vagrant up. Vagrant installs the VM, or starts it when it already
exists, for the default provider, which is VirtualBox. On my main development
machine I use libvirt so I have to pass the provider name to the vagrant up
command[fn:default-provider]. The output of the next command shows the
installation of a new VM:
#+BEGIN_SRC sh :results output :exports both
vagrant up --provider=libvirt
#+END_SRC

#+RESULTS:
: Bringing machine 'default' up with 'libvirt' provider...
: ==> default: Checking if box 'bento/ubuntu-18.04' is up to date...
: ==> default: Creating image (snapshot of base box volume).
: ==> default: Creating domain with the following settings...
: ==> default:  -- Name:              demo_default
: ==> default:  -- Domain type:       kvm
: ==> default:  -- Cpus:              1
: ==> default:  -- Feature:           acpi
: ==> default:  -- Feature:           apic
: ==> default:  -- Feature:           pae
: ==> default:  -- Memory:            4096M
: ==> default:  -- Management MAC:
: ==> default:  -- Loader:
: ==> default:  -- Nvram:
: ==> default:  -- Base box:          bento/ubuntu-18.04
: ==> default:  -- Storage pool:      kvm-pool
: ==> default:  -- Image:             /home/pieter/extra-storage-encrypted/kvm-pool/demo_default.img (64G)
: ==> default:  -- Volume Cache:      default
: ==> default:  -- Kernel:
: ==> default:  -- Initrd:
: ==> default:  -- Graphics Type:     spice
: ==> default:  -- Graphics Port:     -1
: ==> default:  -- Graphics IP:       127.0.0.1
: ==> default:  -- Graphics Password: Not defined
: ==> default:  -- Video Type:        qxl
: ==> default:  -- Video VRAM:        131072
: ==> default:  -- Sound Type:
: ==> default:  -- Keymap:            en-us
: ==> default:  -- TPM Path:
: ==> default:  -- INPUT:             type=mouse, bus=ps2
: ==> default: Creating shared folders metadata...
: ==> default: Starting domain.
: ==> default: Waiting for domain to get an IP address...
: ==> default: Waiting for SSH to become available...
:     default:
:     default: Vagrant insecure key detected. Vagrant will automatically replace
:     default: this with a newly generated keypair for better security.
:     default:
:     default: Inserting generated public key within guest...
:     default: Removing insecure key from the guest if it's present...
:     default: Key inserted! Disconnecting and reconnecting using new SSH key...
: ==> default: Configuring and enabling network interfaces...
: ==> default: Rsyncing folder: /home/pieter/tmp/provisioning/demo/ => /vagrant
: ==> default: Running provisioner: shell...
:     default: Running: inline script
: ==> default: Running provisioner: file...
: ==> default: Running provisioner: file...

The suspend command suspends the VM. As mentioned, suspend means different
things for different providers. For VirtualBox it means suspend-to-disk and for
libvirt it means suspend-to-memory. I changed the behavior for libvirt to
suspend-to-disk in the Vagrantfile:
#+BEGIN_SRC sh
vagrant suspend
#+END_SRC

#+RESULTS:
: ==> default: Suspending domain...

** Makefile targets

- zsh-config :: Use ZSH and Oh my zsh
- desktop-look :: theme the desktop
- install-community-wallpapers :: install the wallpapers from the Xubuntu 18.04
     community contest
This installs the wallpapers in /usr/share/xfce4/backdrops

- whiskermenu :: install the Whisker Menu, a panel item that can replace the
     application menu

*** Setup zsh

Target *setup-zsh* sets up zsh as the login shell and installs the [[https://github.com/robbyrussell/oh-my-zsh][oh-my-zsh]]
configuration:
#+BEGIN_SRC makefile :noweb-ref setup-zsh
setup-zsh: install-zsh set-zsh-as-login-shell | $(HOME)/.oh-my-zsh

install-zsh:
	sudo apt-get install -y zsh

set-zsh-as-login-shell:
	@echo Set login shell of the current user to zsh. This requires you to enter
	@echo your password and a logout \& login.
	chsh -s $(shell which zsh)

$(HOME)/.oh-my-zsh: $(HOME)/tmp/install-oh-my-zsh.sh
	sh $<

$(HOME)/tmp/install-oh-my-zsh.sh: | $(HOME)/tmp
	curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh > $@
	sed -i '/^.*env zsh -l/d' $@
#+END_SRC

*** Add fullscreen resolution to Thinkpad X220

The VM does not support the native resolution of my Thinkpad X220, that is,
1366x768. Target *x220-add-fullscreen-to-vm* installs the appropriate Xorg
configuration file:
#+BEGIN_SRC makefile :noweb-ref x220-add-fullscreen-to-vm
x220-add-fullscreen-to-vm: /etc/X11/xorg.conf.d/40-x220.conf

/etc/X11/xorg.conf.d/40-x220.conf: 40-vm-on-x220.conf | /etc/X11/xorg.conf.d
	sudo cp 40-vm-on-x220.conf $@

/etc/X11/xorg.conf.d:
	sudo mkdir -p $@
#+END_SRC

*** Let CAPS behave like CTRL
As an Emacs user, I remap my CAPS key to CTRL. Target *set-caps-to-ctrl* adds
takes care of that:
#+BEGIN_SRC makefile :noweb-ref set-caps-to-ctrl
CAPS_TO_CTRL_COMMAND="setxkbmap -option compose:rctrl -option ctrl:nocaps"

set-caps-to-ctrl: $(HOME)/.xprofile
	if ! grep -q $(CAPS_TO_CTRL_COMMAND) $<; then echo $(CAPS_TO_CTRL_COMMAND) >> $<; fi
#+END_SRC

*** Append local user directory to PATH
When I install software for the current user only, I install it in ~/.local.
Target *append-local-to-path* adds ~/.local/bin to the PATH of the current user:
#+BEGIN_SRC makefile :noweb-ref append-local-to-path
LOCAL_BIN=\$$HOME/.local/bin
LOCAL_DIR_MARKER="PATH=\"$(LOCAL_BIN)"
LOCAL_DIR_LINES=if [ -d \"$(LOCAL_BIN)\" ]; then export PATH=\"$(LOCAL_BIN):\$$PATH\"; fi

append-local-to-path: $(HOME)/.profile
	if ! grep -q $(LOCAL_DIR_MARKER) $<; then \
		echo "$(LOCAL_DIR_LINES)" >> $< ; \
	fi
#+END_SRC

*** Emacs

Target *emacs* builds Emacs from source and installs it locally:
#+BEGIN_SRC makefile :noweb-ref emacs-from-source
EMACS_VERSION=26.1
EMACS_NAME=emacs-$(EMACS_VERSION)
EMACS_ARCHIVE=$(EMACS_NAME).tar.gz

emacs: install-emacs-build-dependencies $(HOME)/.local/bin/$(EMACS_NAME)

install-emacs-build-dependencies:
	sudo apt-get -y install autoconf automake libtool texinfo build-essential xorg-dev libgtk2.0-dev libjpeg-dev libncurses5-dev libdbus-1-dev libgif-dev libtiff-dev libm17n-dev libpng-dev librsvg2-dev libotf-dev libgnutls28-dev libxml2-dev

$(HOME)/.local/bin/$(EMACS_NAME): $(HOME)/external_software/$(EMACS_NAME) | $(HOME)/.local
	cd $< && ./configure --prefix=$(HOME)/.local && make && make install

$(HOME)/external_software/$(EMACS_NAME): $(HOME)/tmp/$(EMACS_ARCHIVE) | $(HOME)/external_software
	tar xvf $< -C $(HOME)/external_software

$(HOME)/tmp/$(EMACS_ARCHIVE): | $(HOME)/tmp
	cd $(HOME)/tmp && wget --timestamping http://ftp.snt.utwente.nl/pub/software/gnu/emacs/$(EMACS_ARCHIVE)

emacs-clean:
	- cd $(HOME)/external_software/$(EMACS_NAME) && make uninstall
	- rm -rf $(HOME)/external_software/$(EMACS_NAME)
#+END_SRC
On my Thinkpad X220 the complete process takes about 10 minutes[fn:specs].

*** Spacemacs

Target *spacemacs* installs Spacemacs. If you want my personal Spacemacs
configuration, also execute target *spacemacs-config*:
#+BEGIN_SRC makefile :noweb-ref spacemacs
spacemacs: install-spacemacs-dependencies $(HOME)/.emacs.d

install-spacemacs-dependencies:
	sudo apt-get install -y fonts-powerline

$(HOME)/.emacs.d: $(LOCAL_GITHUB_REPOS_DIR)/spacemacs
	ln -s $< $@

$(LOCAL_GITHUB_REPOS_DIR)/spacemacs: | $(LOCAL_GITHUB_REPOS_DIR)
	cd $(LOCAL_GITHUB_REPOS_DIR) && git clone https://github.com/syl20bnr/spacemacs.git
	cd $@ && git checkout develop

spacemacs-clean:
	rm -rf $(LOCAL_GITHUB_REPOS_DIR)/spacemacs
	rm $(HOME)/.emacs.d

spacemacs-config: $(HOME)/.spacemacs $(HOME)/.emacs.d/private/spacemacs-config $(HOME)/.emacs.d/private/journal $(LOCAL_GITHUB_REPOS_DIR)/oje

$(HOME)/.spacemacs: $(LOCAL_GITHUB_REPOS_DIR)/spacemacs-config/.spacemacs
	ln -s $< $@

$(LOCAL_GITHUB_REPOS_DIR)/spacemacs-config/.spacemacs: $(LOCAL_GITHUB_REPOS_DIR)/spacemacs-config

$(HOME)/.emacs.d/private/spacemacs-config: $(LOCAL_GITHUB_REPOS_DIR)/spacemacs-config
	ln -s $< $@

$(LOCAL_GITHUB_REPOS_DIR)/spacemacs-config: | $(LOCAL_GITHUB_REPOS_DIR)
	cd $(LOCAL_GITHUB_REPOS_DIR) && git clone https://github.com/swinkels/spacemacs-config.git

$(HOME)/.emacs.d/private/journal: $(LOCAL_GITHUB_REPOS_DIR)/spacemacs-journal
	ln -s $< $@

$(LOCAL_GITHUB_REPOS_DIR)/spacemacs-journal: | $(LOCAL_GITHUB_REPOS_DIR)
	cd $(LOCAL_GITHUB_REPOS_DIR) && git clone https://github.com/borgnix/spacemacs-journal.git

$(LOCAL_GITHUB_REPOS_DIR)/oje: | $(LOCAL_GITHUB_REPOS_DIR)
	cd $(LOCAL_GITHUB_REPOS_DIR) && git clone https://github.com/swinkels/oje.git

fonts: $(LOCAL_FONTS_DIR)/source-code-pro

$(LOCAL_FONTS_DIR)/source-code-pro: $(LOCAL_GITHUB_REPOS_DIR)/source-code-pro | $(LOCAL_FONTS_DIR)
	- rm $@
	ln -s $< $@
	fc-cache -f -v $@

$(LOCAL_GITHUB_REPOS_DIR)/source-code-pro: | $(LOCAL_GITHUB_REPOS_DIR)
	cd $< && git clone --branch release --depth 1 https://github.com/adobe-fonts/source-code-pro.git

fonts-clean:
	- rm $(LOCAL_FONTS_DIR)/source-code-pro
	- rm -rf $(LOCAL_GITHUB_REPOS_DIR)/source-code-pro
	# regenerate the font config cache after the removal of Source Code Pro
	rm -rf ~/.cache/fontconfig
	fc-cache -f -v
#+END_SRC

*** C++ development

The C++ layer can use multiple backends to retrieve information about the C++
code at hand, among them the C/C++ language servers [[https://github.com/cquery-project/cquery][cquery]] and [[https://github.com/MaskRay/ccls][ccls]]. First I
tried cquery but more often than not it would not work. Then I set my sights on
ccls, which did function.

The [[https://github.com/MaskRay/ccls/wiki/Build][Build page of the ccls wiki]] documents how to build the C/C++ language
server. Target *ccls* automates these steps:
#+BEGIN_SRC makefile :noweb-ref c++-dev
CLANG_NAME=clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-18.04
CLANG_ARCHIVE=$(CLANG_NAME).tar.xz

ccls: $(HOME)/.local/bin/ccls

$(HOME)/.local/bin/ccls: $(LOCAL_GITHUB_REPOS_DIR)/ccls/Release/ccls
	ln -s $<

$(LOCAL_GITHUB_REPOS_DIR)/ccls/Release/ccls: | $(LOCAL_GITHUB_REPOS_DIR)/ccls
	cd $(LOCAL_GITHUB_REPOS_DIR)/ccls && cmake -H. -BRelease -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=$(HOME)/external_software/$(CLANG_NAME)
	cd $(LOCAL_GITHUB_REPOS_DIR)/ccls && cmake --build Release

$(LOCAL_GITHUB_REPOS_DIR)/ccls: | $(HOME)/external_software/$(CLANG_NAME)
	cd $(LOCAL_GITHUB_REPOS_DIR) && git clone --depth=1 --recursive https://github.com/MaskRay/ccls

$(HOME)/external_software/$(CLANG_NAME): $(HOME)/tmp/$(CLANG_ARCHIVE) | $(HOME)/external_software
	tar xvf $< -C $(HOME)/external_software
	touch $@ # so the target (directory) is newer than the archive

$(HOME)/tmp/$(CLANG_ARCHIVE): | $(HOME)/tmp
	cd $(HOME)/tmp && wget --timestamping http://releases.llvm.org/8.0.0/$(CLANG_ARCHIVE)
#+END_SRC

*** Python development

Target *python-dev* installs the Python3 version of pip and virtualenvwrapper
locally:
#+BEGIN_SRC makefile :noweb-ref python-dev
python-dev: | $(HOME)/.local $(HOME)/tmp
	curl -fsSL https://bootstrap.pypa.io/get-pip.py > $(HOME)/tmp/get-pip.py
	python3 $(HOME)/tmp/get-pip.py --user
	$(HOME)/.local/bin/pip install --user --upgrade virtualenvwrapper

#+END_SRC
virtualenvwrapper is a set of shell extensions. Unfortunately these shell
extensions are not active for zsh but target *install-virtualenvwrapper-in-zsh*
takes care of that:
#+BEGIN_SRC makefile :noweb-ref python-dev
SOURCE_WRAPPER_MARKER=\$$HOME/.local/bin/virtualenvwrapper.sh
SOURCE_WRAPPER_LINES=source $(SOURCE_WRAPPER_MARKER)

install-virtualenvwrapper-in-zsh: $(HOME)/.zshrc $(HOME)/.virtualenvs
	if ! grep -q "$(SOURCE_WRAPPER_MARKER)" $<; then \
		echo >> $< ; \
		echo "# added by the provisioning script" >> $< ; \
		echo "export WORKON_HOME=\$$HOME/.virtualenvs" >> $< ; \
		echo "export VIRTUALENVWRAPPER_PYTHON=`which python3`" >> $< ; \
		echo "$(SOURCE_WRAPPER_LINES)" >> $< ; \
	fi

$(HOME)/.virtualenvs:
	mkdir $@

WRAPPER_MARKER=virtualenvwrapper

install-zsh-plugin-virtualenvwrapper: $(HOME)/.zshrc
	if ! grep -q "$(WRAPPER_MARKER)" $<; then \
		sed -i -r 's/(^plugins=\()(.*)$$/\1$(WRAPPER_MARKER) \2/' $(HOME)/.zshrc ; \
	fi
#+END_SRC
You have to re-login to make these shell extensions active.

** Makefile structure

#+BEGIN_SRC makefile :noweb tangle :tangle Makefile
LOCAL_FONTS_DIR=$(HOME)/.local/share/fonts
LOCAL_GITHUB_REPOS_DIR=$(HOME)/repos/github.com

bootstrap:
	# set the local time to CET
	- sudo rm /etc/localtime
	sudo ln -s /usr/share/zoneinfo/CET /etc/localtime
	# resynchronize the package index files from their sources
	sudo apt-get update -y
	# install the newest versions of all packages currently installed
	sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -o DPkg::Options::=--force-confdef -y
	# install a display manager
	sudo apt-get install -y lightdm lightdm-gtk-greeter
	# install xfce
	sudo apt-get install -y xfce4 xfce4-terminal
	# permit anyone to start the GUI
	sudo sed -i 's/allowed_users=.*/allowed_users=anybody/' /etc/X11/Xwrapper.config
	# install "absolutely required" applications
	sudo apt-get install -y policykit-1-gnome synaptic
	sudo apt-get install -y browser-plugin-freshplayer-pepperflash firefox
	sudo apt-get install -y git
	sudo apt-get install -y tree

.PHONY: depends install-emacs-dependencies append-local-to-path whiskermenu

depends: install-emacs-dependencies

fix-sources-list:
	sudo sed -i -r 's/^# (deb-src http.* bionic main restricted.*)/\1/' /etc/apt/sources.list
	sudo apt-get update

<<emacs-from-source>>

<<spacemacs>>

<<c++-dev>>

<<python-dev>>

$(HOME)/.zshrc: $(HOME)/.zshrc.orig
	cp $< $@

$(HOME)/.zshrc.orig:
	if [ -s $(HOME)/.zshrc ]; then \
		cp $(HOME)/.zshrc $(HOME)/.zshrc.orig ; \
	else \
		touch $(HOME)/.zshrc.orig ; \
	fi

<<setup-zsh>>

<<set-caps-to-ctrl>>

$(HOME)/.xprofile: $(HOME)/.xprofile.orig
	cp $< $@

$(HOME)/.xprofile.orig:
	if [ -s $(HOME)/.xprofile ]; then \
		cp $(HOME)/.xprofile $(HOME)/.xprofile.orig ; \
	else \
		touch $(HOME)/.xprofile.orig ; \
	fi

<<append-local-to-path>>

$(HOME)/.profile: $(HOME)/.profile.orig
	echo "# This file is generated from $< by the" > $@
	echo "# provisioning script. If you modify this file, your modifications" >> $@
	echo "# can be undone during the next run of that script." >> $@
	echo >> $@
	cat $< >> $@
	echo >> $@

$(HOME)/.profile.orig:
	if [ -s $(HOME)/.profile ]; then \
		cp $(HOME)/.profile $(HOME)/.profile.orig ; \
	else \
		touch $(HOME)/.profile.orig ; \
	fi

<<x220-add-fullscreen-to-vm>>

desktop-look:
	sudo apt-get install arc-theme fonts-noto
	xfconf-query -c xfwm4 -p /general/theme -n -t string -s "Arc-Dark"
	xfconf-query -c xfwm4 -p /general/title_font -n -t string -s "Noto Sans Bold 9"
	xfconf-query -c xfwm4 -p /general/cycle_workspaces -n -t bool -s false
	xfconf-query -c xfwm4 -p /general/cycle_tabwin_mode -n -t int -s 1
	xfconf-query -c xsettings -p /Net/ThemeName -s "Arc-Dark"
	xfconf-query -c xsettings -p /Gtk/FontName -s "Noto Sans 9"
	xfconf-query -c xsettings -p /Xfce/LastCustomDPI -n -t string -s 101
	xfconf-query -c xsettings -p /Xft/Antialias -s 1
	xfconf-query -c xsettings -p /Xft/DPI -n -t int -s 101
	xfconf-query -c xsettings -p /Xft/Hinting -s 1
	xfconf-query -c xsettings -p /Xft/HintStyle -s "hintmedium"
	xfconf-query -c xsettings -p /Xft/RGBA -s "rgb"
	xfconf-query -c xfce4-panel -p /panels/panel-1/size -n -t int -s 24

install-community-wallpapers:
	sudo apt-get install xubuntu-community-wallpapers

whiskermenu:
	sudo apt-get install xfce4-whiskermenu-plugin

BROWSER_MARKER=WebBrowser=
BROWSER=firefox
TERMINAL_MARKER=TerminalEmulator=
TERMINAL=xfce4-terminal

set-preferred-applications: $(HOME)/.config/xfce4/helpers.rc
	if grep -q "$(BROWSER_MARKER)" $<; then \
		sed -i -r 's/(^$(BROWSER_MARKER))(.*)/\1$(BROWSER)/' $< ; \
	else \
		echo "$(BROWSER_MARKER)$(BROWSER)" >> $< ; \
	fi
	if grep -q "$(TERMINAL_MARKER)" $<; then \
		sed -i -r 's/(^$(TERMINAL_MARKER))(.*)/\1$(TERMINAL)/' $< ; \
	else \
		echo "$(TERMINAL_MARKER)$(TERMINAL)" >> $< ; \
	fi

$(HOME)/.config/xfce4/helpers.rc: $(HOME)/.config/xfce4/helpers.rc.orig
	echo "# This file is generated from $< by the" > $@
	echo "# provisioning script. If you modify this file, your modifications" >> $@
	echo "# can be undone during the next run of that script." >> $@
	echo >> $@
	cat $< >> $@
	echo >> $@

$(HOME)/.config/xfce4/helpers.rc.orig:
	if [ -s $(HOME)/.config/xfce4/helpers.rc ]; then \
		cp $(HOME)/.config/xfce4/helpers.rc $@ ; \
	else \
		touch $@ ; \
	fi

$(HOME)/.local $(LOCAL_FONTS_DIR) $(HOME)/tmp $(HOME)/external_software $(LOCAL_GITHUB_REPOS_DIR):
	mkdir -p $@

install-vagrant: $(HOME)/tmp/vagrant_2.2.2_x86_64.deb
	sudo dpkg -i $<
	vagrant plugin install vagrant-mutate
	vagrant plugin install vagrant-libvirt
	vagrant plugin install nokogiri

$(HOME)/tmp/vagrant_2.2.2_x86_64.deb:
	wget -P $(HOME)/tmp https://releases.hashicorp.com/vagrant/2.2.2/vagrant_2.2.2_x86_64.deb
#+END_SRC

** Troubeshooting

* Footnotes

[fn:vagran-provisioning] [[https://www.vagrantup.com/docs/provisioning/][Provisioning]]. URL visited on January 26, 2019.
[fn:kvm-pool] In hindsight, it would have been easier to just delete the default
storage pool and recreate it on the second drive.
[fn:default-provider] You can also change the default provider by setting
environment variable ~VAGRANT_DEFAULT_PROVIDER~ to the desired default.

 "the virtualization module in the Linux kernel that allows the kernel to create
and run virtual machines"[fn:kvm]
[fn:kvm] Wikipedia articles [[https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine][Kernel-based Virtual Machine]] and [[https://en.wikipedia.org/wiki/Hypervisor][Hypervisor]]. URLs visited on January 24, 2019.
[fn:specs] a Core i5 2.5Ghz laptop with 8 GB of internal memory and the VM on a HDD
