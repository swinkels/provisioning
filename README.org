(work in progress)

This repo contains the files to provision a virtual machine that runs the
Xubuntu desktop environment that I use as the starting point for my development
machines. The virtual machine uses KVM and as such, requires a Linux host.

* Tools & technologies

To create and configure the virtual machine (VM), I rely on the following tools:

- [[https://www.linux-kvm.org/page/Main_Page][KVM]] to create and run VMs on Linux
- [[https://libvirt.org/][libvirt]] to manage the VMs and to provide an API to [[https://www.vagrantup.com/][Vagrant]]
- [[https://www.vagrantup.com/][Vagrant]] to install a VM based on Ubuntu 18.04
- [[https://www.gnu.org/software/make/][GNU Make]] to automate the configuration of the VM after its install
- [[http://www.fabfile.org/][Fabric]] to deploy the Makefile to the VM and run it there

In the context of Vagrant, /provisioning/ is the term to "automatically install
software, alter configurations, and more on the machine as part of the vagrant
up process"[fn:vagrant-provision]]. As such, Vagrant reserves "provisioning" to
the configuration of the OS once Vagrant has created the VM and installed the
base box.

I am not sure if the Vagrent definition of provisioning is the official one, if
there is an official one, but that is the definition I use in this document. So
in my setup, GNU make and Fabric take care of provisioning the VM.

* Initial setup

** Configuration of libvirt storage pool

libvirt stores VM images in a storage pool named "default" and that points to
/var/lib/libvirt/images. That is not ideal for my main host machine as the home
partition is on a smaller SSD and I added a second storage pool named "kvm-pool"
on my second, much larger drive[fn:kvm-pool]. I did this using [[https://virt-manager.org/][virt-manager]], a
GUI application to manage virtual machines through libvirt.

** Installation of Vagrant

I use the vagrant version that comes with Xubuntu 16.04:
#+BEGIN_SRC
apt-get install vagrant
#+END_SRC
At the time of writing this, its version is version 2.2.2.

To be able to use vagrant with KVM and libvirt, I need several vagrant plugins:
#+BEGIN_SRC
vagrant plugin install vagrant-kvm
vagrant plugin install vagrant-libvirt
vagrant plugin install nokogiri
vagrant plugin install vagrant-mutate
#+END_SRC

Vagrant downloads end up in your home directory in ~/.vagrant.d/. To let Vagrant
use a directory on my second drive, I set environment variable VAGRANT_HOME:
#+BEGIN_SRC
export VAGRANT_HOME=/media/data/pieter/.vagrant.d
#+END_SRC
I set that line in ~/.profile so it is always set.

** Setup the Python environment

Fabric is a Python tool to execute shell commands over SSH. I use the Python2
version, which I install in a Python virtual environment. The use of virtualenvs
is beyond the scope of this README, but to setup one and install Fabric, use the
following commands:
#+BEGIN_SRC
mkvirtualenv provisioning
pip install -r requirements.txt
#+END_SRC

** Preparation of the Vagrant box

The [[https://app.vagrantup.com/bento/boxes/ubuntu-18.04][bento/ubuntu-18.04]] box is not available for libvirt, so I downloaded the
onver for VirtualBox:
#+BEGIN_SR
vagrant box add bento/ubuntu-18.04 --provider virtualbox
#+END_SRC
and convert that one to libvirt:
#+BEGIN_SRC
vagrant mutate bento/ubuntu-18.04 libvirt
#+END_SRC

* Creating and provision the VM

** Initial installation

To create the VM and install the base box, use the following command:
#+BEGIN_SRC
vagrant up --provider=libvirt
#+END_SRC
When that command finishes, the VM is up and running and we can connect to
it using the following command:
#+BEGIN_SRC sh
vagrant ssh
#+END_SRC
In its current state, the installed OS is rather bare-bones. To be able to use
it for development a lot more configuration is needed. That configuration is
done using Fabric.

** Provisioning

Fortunately Vagrant can export its SSH config so other tools can use it:
#+BEGIN_SRC sh :results output
vagrant ssh-config > vagrant-ssh
cat vagrant-ssh
#+END_SRC

#+RESULTS:
#+begin_example
Host default
  HostName 192.168.121.87
  User vagrant
  Port 22
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile /home/pieter/repos/github.com/provisioning/.vagrant/machines/default/libvirt/private_key
  IdentitiesOnly yes
  LogLevel FATAL

#+end_example

For example, we can use standard ssh to connect to the VM:
#+BEGIN_SRC
$> ssh -F vagrant-ssh default
#+END_SRC

Much of the configuration of the VM is automated via the Makefile that is in the
root of this rep. I use Fabric to copy the Makefile to the VM, and run ~make
bootstrap~ on the VM. You can execute these two steps as follows:
#+BEGIN_SRC
$> workon provisioning
$> fab --hosts=default --ssh-config=vagrant-ssh copy-files
$> fab --hosts=default --ssh-config=vagrant-ssh make bootstrap x220-add-fullscreen-to-vm
#+END_SRC

** Final manual configuration

* Appendix

** Often used Vagrant commands

- vagrant up :: to install or restart the VM
- vagrant suspend :: to "suspend" the VM - note that what suspend does, depends
     on the provider
- vagrant reload :: to shutdown a running VM and restart it
- vagrant provision :: to configure the VM

In the remainder of this section I will illustrate the use of these commands.

First up is vagrant up. Vagrant installs or starts the VM with the default
provider, which is VirtualBox by default. Om my main development machine I use
libvirt so I have to pass that to the vagrant up command[fn:default-provider]:
#+BEGIN_SRC sh :results output
vagrant up --provider=libvirt
#+END_SRC

#+RESULTS:
: Bringing machine 'default' up with 'libvirt' provider...
: ==> default: Checking if box 'bento/ubuntu-18.04' is up to date...
: ==> default: Starting domain.
: ==> default: Waiting for domain to get an IP address...
: ==> default: Waiting for SSH to become available...
: ==> default: Creating shared folders metadata...
: ==> default: Rsyncing folder: /home/pieter/repos/github.com/provisioning/ => /vagrant
: ==> default: Machine already provisioned. Run `vagrant provision` or use the `--provision`
: ==> default: flag to force provisioning. Provisioners marked to run always will still run.

The suspend command suspends the VM. As mentioned, suspend means different
things for different providers. For VirtualBox it means suspend-to-disk and for
libvirt it means suspend-to-memory. I changed the behavior for libvirt to
suspend-to-disk in the Vagrantfile:
#+BEGIN_SRC sh
vagrant suspend
#+END_SRC

#+RESULTS:
: ==> default: Suspending domain...

** Troubeshooting

* Footnotes

[fn:vagran-provisioning] [[https://www.vagrantup.com/docs/provisioning/][Provisioning]]. URL visited on January 26, 2019.
[fn:kvm-pool] In hindsight, it would have been easier to just delete the default
storage pool and recreate it on the second drive.
[fn:default-provider] You can also change the default provider by setting
environment variable ~VAGRANT_DEFAULT_PROVIDER~ to the desired default.

 "the virtualization module in the Linux kernel that allows the kernel to create
and run virtual machines"[fn:kvm]
[fn:kvm] Wikipedia articles [[https://en.wikipedia.org/wiki/Kernel-based_Virtual_Machine][Kernel-based Virtual Machine]] and [[https://en.wikipedia.org/wiki/Hypervisor][Hypervisor]]. URLs visited on January 24, 2019.
